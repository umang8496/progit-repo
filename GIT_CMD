$sudo apt-get install git
$sudo apt install git-all
$which git

>>>git --version
>>>git init
>>>git status
>>>git clone <SSH|URL> : gives the cloned version of the repository with master branch

>>>git config --global user.name "<user_name>"
>>>git config --global user.email <user_email>
>>>git config --global core.editor <editor_name> or <editor_path>
>>>git config --global branch.autosetuprebase always : helps avoid unintentional merge commits (imp)

>>>git config --global alias.ck checkout : creates ck as an alias for checkout
>>>git config --global alias.br branch : creates br as an alias for branch
>>>git config --global alias.st status : creates st as an alias for status
>>>git config --global alias.unstage 'reset HEAD --' : equivalent to git unstage <file>
>>>git config --global alias.last 'log -1 HEAD' : displays the last log details 

>>>git add <filename> : adds a file to the staging area
>>>git commit -m "<commit_msg>" : commits the files which is in the staging area

Never amend a commit that has been pushed to the remote repository
>>>git commit --amend --no-edit : amends the most recent commit with more changes (imp)
>>>git commit --amend

>>>git remote add origin https://github.com/umang8496/progit_repo.git
>>>git push -u origin master

>>>git diff : displays what has been changed but not yet staged
>>>git diff --staged|--cached : compares staged changes to the last commit 
>>>git diff --color-words <file_name>

>>>git log --oneline
>>>git log --oneline --decorate --graph --all
>>>git log --oneline <branch_name> : shows the logs corresponding to the specified branch
>>>git log --stat --oneline -n <number>
>>>git log -p -<n>: shows all the details related to the commit; n corresponds to an integer
>>>git log --oneline <filename> : displays the logs corresponding to the specified file
>>>git log --follow [file] : lists version history for a file, including renames
>>>git log --format=oneline : [format --> full, short, medium, fuller, email, raw]
>>>git log <SHA>..<SHA> --oneline <file_name>
>>>git log --stat --summary
>>>git log <branch_name> --oneline -<number> : it will show n number of logs for a branch

In GIT, checkout is the act of switching between different versions of a target entity.
It operates on three distinct entities, files, commits and branches.
>>>git checkout -- <filename> : discards the changes made to the file when it is in unstaged state
>>>git checkout <SHA> -- <file_name> : bring the specified file in sync with the earlier version of itself corresponding to the commit

>>>git checkout -b <branch_name> : create a new branch and switch to it
>>>git checkout <branch_name> : simply switch to the specified branch
>>>git checkout --force|-f <branch_name>

>>>git branch <branch> : creates a branch but does not switch to it
>>>git branch : displays the current branch
>>>git branch <branch_name> : creates a branch with the specified name
>>>git branch -m <existing_branch_name> <new_branch_name> : renaming a branch
>>>git branch -d <name-of-the-branch> : does not delete the unmerged branches 
>>>git branch -D <name-of-the-branch> : deletes the unmerged branches too
>>>git branch --merged : tells us what branch has been incorporated into the current branch
>>>git branch -v : displays the last commit of each branch
>>>git branch -vv : displays all the tracking branches along with their latest commits

>>>git branch --merged : displays the branches that are already merged into the current branch
>>>git branch --no-merged : displays the branches that have not been merged yet into the current branch

>>>git rm <filename> : removes the file from the staging area as well as working tree
>>>git rm --cached <filename> : removes the file from tracking state but keeps it on the hard drive

>>>git mv <file_from> <file_to> : used to rename a file and put the changes into staging area

>>>git push <remote> <branch> : GIT won't let us push when it results in a non-fast-forward merge in the destination repository
>>>git push <remote> --force|-f : pushes the commits and objects even if it results in a non-fast-forward merge
>>>git push <remote> --all : pushes all the local branches to the specified remote
>>>git push origin :<branch-name> : this would delete the branch from the remote server [older method]
>>>git push origin --delete <branch-name> : this would delete the branch from the remote server [newer method]

>>>git fetch <remote> : fetches all the branches from the repo and downloads all of the required commits and files from the repo
>>>git fetch <remote> <branch> : only fetches the specified branch
>>>git fetch --all|-a : fetches all registered remotes and their branches
>>>git fetch --dry-run : shows what would be done, without making any changes

>>>git stash : takes the uncommitted changes (staged and unstaged) and saves them away for later use
>>>git stash pop : removes the changes from the stash and reapplies them to our working tree
>>>git stash apply : reapplies the changes to the working tree and also keeps them in our stash (recommended)
>>>git stash show : shows the summary for all the stashes
>>>git stash show --patch|-p : shows the full diff of the stash
>>>git stash show stash@{ID} : shows the full diff of a particular stash
>>>git stash list : lists all the stashes
>>>git stash save "<stash_msg>" : saves a stash with the specified message
>>>git stash drop <stashID> : drops a particular stash
>>>git stash clear : clears the entire stash
>>>git stash --include-untracked|-u : to stash untracked files also
>>>git stash --all|-a : stashes everything including ignored files

For stashing only a bunch of files not all of the files present in the staging, unstaged or untracked areas.
>>>git stash save --patch|-p "<stashing message>" : opens up an intractive window with the options for each individual files
    y : stash this hunk
    n : do not stash this hunk
    q : quit; do not stash this hunk or any of the remaining ones
    a : stash this hunk and all the later hunks in the file
    d : do not stash this hunk or any of the later hunks in the file
    j : leave this hunk undecided, see next undecided hunk
    J : leave this hunk undecided, see next hunk
    k : leave this hunk undecided, see previous undecided hunk
    K : leave this hunk undecided, see previous hunk
    e : edit the current hunk manually

This removes only the untracked files from the working directory.
>>>git clean -n : performs a dry-run of git clean; shows which files are going to be removed without actually removing them
>>>git clean -f|--force : initiates the actual deletion of the untracted files from the current directory

>>>git revert <SHA> : for undoing changes but does not remove the commit from the project history
>>>git revert HEAD --edit|-e : default option which will open the configured system editor and prompts us to edit the commmit message
>>>git revert HEAD --no-edit|-n : the revert will not open the editor
>>>git revert HEAD --no-commit|-n : this option will prevent git revert from creating a new commit that inverses the target commit.
				    Instead  this option will add the inverse changes to the Staging Index and Working Directory.

>>>git reset --soft|--mixed|--hard <SHA>
>>>git reset HEAD <file_name> : for unstaging the changes, we use the reset option
>>>git reset --hard : reset staging area and working directory to match most recent commit and overwrites all the changes in the CWD

--soft
does not change staging index or working directory; just moves the HEAD pointer to the previous commit.

--mixed (default)
moves the HEAD pointer to the specified commit and also changes the staging index to match the repository.
but does not change the working index.

--hard
moves the HEAD pointer to the specified commit and it changes the staging index as well as the working directory to match.

>>>git pull --rebase : just pulls the latest changes into the local repository without merging it (recommended)
>>>git pull origin <branch> : it pulls the remote changes and merges it with the local branch thereby creating one more commit

>>>git remote -v : displays the configured git remote servers
>>>git remote add <shortname> <url> : adds the new remote explicitly with the alias name
>>>git remote rename <existing_name> <new_name>
>>>git remote remove <remote_name>
>>>git remote show <remote> : displays the full list of remote references

>>>git fetch <remote> : helps synchronize our branch with the remote server

>>>git tag --list|-l : lists the tags in alphabetical order
>>>git tag -l "<tag_name>" : searches for a tag that match the particular pattern
>>>git tag -a <tag_name> -m "<tag_msg>" : creates an annotated tag with the specified tag name
>>>git show <tag_name> : displays the tag details
>>>git tag <tag_name> : creates a lightweighted tag
>>>git tag -a <tag_name> <SHA> : creates the tag corresponding to the commit SHA after getting passed the commit
>>>git tag -d <tag_name> : deletes the tag from the local repository; this doesn't remove remote tag from the server
>>>git push <remote> --delete <tag_name> : deletes the remote tag from the remote repository
>>>git checkout <tag_name> : checkouts the version of the snapshot but also puts the repository in the "detached HEAD" state
>>>git checout -b <branch> <tag_name> : creates a branch out of the specified tag

By default, git push command doesn't transfer tags to remote servers. We need to explicitly push tags to a shared server.
>>>git push <remote> <tag_name>
>>>git push <remote> --tags : transfers all the tags to the remote server

If we already have a local branch and want to set it to a remote branch we just pulled down, or want to change the upstream branch weâ€™re tracking, we can use the -u or --set-upstream-to option to git branch to explicitly set it at any time.
>>>git branch --set-upstream-to|-u origin/serverfix
